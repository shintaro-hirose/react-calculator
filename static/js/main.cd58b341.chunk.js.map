{"version":3,"sources":["components/MyButton.js","components/Display.js","containers/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["MyButton","props","classes","makeStyles","theme","margin","spacing","backgroundColor","useStyles","Fab","color","className","onClick","children","box","fontSize","width","Display","Box","Calculator","useState","value1","setValue1","value2","setValue2","operator","setOperator","isAllClear","setIsAllClear","isDicimalInput","setIsDicimalInput","isAnswerDisplay","setIsAnswerDisplay","handleNumberClick","num","String","Number","handleOperatorClick","a","displayMarkup","clearButtonMarkup","Typography","variant","display","flexDirection","justifyContent","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cd58b341.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Fab from '@material-ui/core/Fab';\n\nexport default function MyButton(props) {\n  const useStyles = makeStyles((theme) => ({\n    margin: {\n      margin: theme.spacing(1),\n      backgroundColor: props.backgroundColor\n    },\n  }));\n  const classes = useStyles();\n\n\n  return (\n      <div>\n        <Fab color=\"inherit\" className={classes.margin} onClick={props.onClick}>\n            {props.children}\n        </Fab>\n      </div>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\n\nconst useStyles = makeStyles((theme) => ({\n    box: {\n        fontSize: \"60px\",\n        width: \"100%\",\n        margin: \"0 auto\",\n    },\n  }));\n\nexport default function Display(props) {\n  const classes = useStyles();\n\n  return (\n      <div>\n       <Box className={classes.box}>\n            {props.children}\n       </Box>\n      </div>\n  );\n}","import React, {useState} from 'react';\n\nimport MyButton from '../components/MyButton';\nimport Display from '../components/Display';\n\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\n\nfunction Calculator(){\n    const [value1, setValue1] = useState(\"0\");\n    const [value2, setValue2] = useState(\"0\");\n    const [operator, setOperator] = useState(false);\n    const [isAllClear, setIsAllClear] = useState(true);\n    const [isDicimalInput, setIsDicimalInput] = useState(false);\n    const [isAnswerDisplay, setIsAnswerDisplay] = useState(false);\n\n    const handleNumberClick = (num) => {\n        if(isAnswerDisplay){\n            setValue1(num);\n            setValue2(\"0\");\n            setOperator(false);\n            setIsAnswerDisplay(false);\n            setIsDicimalInput(false);\n        } else {\n            if(!operator){\n                if(isDicimalInput){\n                    setValue1(String(value1) + String(num))\n                } else {\n                    setValue1(String(Number(value1)*10+num));\n                }\n                \n            } else {\n                if(isDicimalInput){\n                    setValue2(String(value2) + String(num))\n                } else {\n                    setValue2(String(Number(value2)*10+num));\n                }\n            }\n        }\n        if(num !== 0){\n            setIsAllClear(false);\n        }\n    }\n\n    const handleDoubleZeroClick = () => {\n        if(!operator){\n            if(isDicimalInput){\n                setValue1(String(value1) + \"00\")\n            } else {\n                setValue1(String(Number(value1)*100));\n            }\n        } else {\n            if(isDicimalInput){\n                setValue2(String(value2) + \"00\")\n            } else {\n                setValue2(String(Number(value2)*100));\n            }\n        }\n    }\n\n    const handleClearClick = () => {\n        setIsDicimalInput(false);\n        if(isAllClear){\n            setValue1(\"0\");\n            setOperator(false);\n            setIsAnswerDisplay(false)\n        } else {\n            setIsAllClear(true);\n            if(isAnswerDisplay){\n                setValue1(\"0\")\n            } else{\n                if(!operator){\n                    setValue1(\"0\");\n                } else {\n                    setValue2(\"0\");\n                }\n            }\n        }\n    }\n\n    const handleMinusPlusClick = () => {\n        if(isAnswerDisplay){\n            setValue1(-1 * Number(value1));\n        } else {\n            if(!operator){\n                setValue1(-1 * Number(value1));\n            } else {\n                setValue2(-1 * Number(value2));\n            }\n        }\n        \n    }\n\n    const handlePercentageClick = () => {\n        if(isAnswerDisplay){\n            setValue1(Number(value1) * 0.01);\n        } else {\n            if(!operator){\n                setValue1(Number(value1) * 0.01);\n            } else {\n                setValue2(Number(value2) * 0.01);\n            }\n        }\n    }\n\n    const handleOperatorClick = (a) => {\n        if(isAnswerDisplay){\n            setIsAnswerDisplay(false);\n        } else {\n            if(value2 !== \"0\"){\n                if(operator === \"add\"){\n                    setValue1(Number(value1) + Number(value2))\n                } else if(operator === \"subtract\"){\n                    setValue1(Number(value1) - Number(value2))\n                } else if(operator === \"divide\"){\n                    setValue1(Number(value1) / Number(value2))\n                } else if(operator === \"multiply\"){\n                    setValue1(Number(value1) * Number(value2))\n                }\n            }\n        }\n        setIsDicimalInput(false);\n        setOperator(a);\n        setValue2(\"0\")\n    }\n\n    const handleDicimalPointClick = () => {\n        if(isDicimalInput) return;\n\n        setIsDicimalInput(true);\n        if(!operator){\n            setValue1(String(value1) + '.')\n        } else {\n            setValue2(String(value2) + '.')\n        }\n    }\n\n    const handleAnswerClick = () => {\n        setIsDicimalInput(false);\n        setIsAnswerDisplay(true);\n        if(operator === \"add\") {\n            if(value2 === \"0\"){\n                setValue2(value1)\n                setValue1(Number(value1) + Number(value1))\n            } else {\n                setValue1(Number(value1) + Number(value2))\n            }\n        } else if(operator === \"subtract\") {\n            if(value2 === \"0\"){\n                setValue2(Number(value1))\n                setValue1(Number(value1) - Number(value1))\n            } else {\n                setValue1(Number(value1) - Number(value2))\n            }\n        } else if(operator === \"divide\") {\n            if(value2 === \"0\"){\n                setValue2(Number(value1))\n                setValue1(Number(value1) / Number(value1))\n            } else {\n                setValue1(Number(value1) / Number(value2))\n            }\n        } else if(operator === \"multiply\"){\n            if(value2 === \"0\"){\n                setValue2(Number(value1))\n                setValue1(Number(value1) * Number(value1))\n            } else {\n                setValue1(Number(value1) * Number(value2))\n            }\n        }\n    }\n\n\n    const displayMarkup = isAnswerDisplay ? (\n        value1\n    ) : (\n        operator ? (\n            value2\n        ) : (\n            value1\n        )\n    );\n\n    const clearButtonMarkup = isAllClear ? (\n        \"AC\"\n    ) : (\n        \"C\"\n    )\n    return(\n        <div>\n            <Typography variant=\"h5\">\n                React Calculator\n            </Typography>\n            <Display>\n                {displayMarkup}\n            </Display>\n            <Box display=\"flex\" flexDirection=\"column\">\n                <Box display=\"flex\" justifyContent=\"center\">\n                    <MyButton backgroundColor=\"gray\" onClick={handleClearClick}>\n                        <Typography variant=\"h5\">{clearButtonMarkup}</Typography>\n                    </MyButton>\n                    <MyButton backgroundColor=\"gray\" onClick={handleMinusPlusClick}>\n                        <Typography variant=\"h5\">-/+</Typography>\n                    </MyButton>\n                    <MyButton backgroundColor=\"gray\" onClick={handlePercentageClick}>\n                        <Typography variant=\"h5\">%</Typography>\n                    </MyButton>\n                    <MyButton backgroundColor=\"orange\">\n                        <Typography variant=\"h5\" onClick={() => handleOperatorClick(\"divide\")}>÷</Typography>\n                    </MyButton>\n                </Box>\n                <Box display=\"flex\" justifyContent=\"center\">\n                    <MyButton onClick={() => handleNumberClick(7)}>\n                        <Typography variant=\"h5\">7</Typography>\n                    </MyButton>\n                    <MyButton onClick={() => handleNumberClick(8)}>\n                        <Typography variant=\"h5\">8</Typography>\n                    </MyButton>\n                    <MyButton onClick={() => handleNumberClick(9)}>\n                        <Typography variant=\"h5\">9</Typography>\n                    </MyButton>\n                    <MyButton backgroundColor=\"orange\">\n                        <Typography variant=\"h5\" onClick={() => handleOperatorClick(\"multiply\")}>×</Typography>\n                    </MyButton>\n                </Box>\n                <Box display=\"flex\" justifyContent=\"center\">\n                    <MyButton onClick={() => handleNumberClick(4)}>\n                        <Typography variant=\"h5\">4</Typography>\n                    </MyButton>\n                    <MyButton onClick={() => handleNumberClick(5)}>\n                        <Typography variant=\"h5\">5</Typography>\n                    </MyButton>\n                    <MyButton onClick={() => handleNumberClick(6)}>\n                        <Typography variant=\"h5\">6</Typography>\n                    </MyButton>\n                    <MyButton backgroundColor=\"orange\">\n                        <Typography variant=\"h5\" onClick={() => handleOperatorClick(\"subtract\")}>-</Typography>\n                    </MyButton>\n                </Box>\n                <Box display=\"flex\" justifyContent=\"center\">\n                    <MyButton onClick={() => handleNumberClick(1)}>\n                        <Typography variant=\"h5\">1</Typography>\n                    </MyButton>\n                    <MyButton onClick={() => handleNumberClick(2)}>\n                        <Typography variant=\"h5\">2</Typography>\n                    </MyButton>\n                    <MyButton onClick={() => handleNumberClick(3)}>\n                        <Typography variant=\"h5\">3</Typography>\n                    </MyButton>\n                    <MyButton backgroundColor=\"orange\">\n                        <Typography variant=\"h5\" onClick={() => handleOperatorClick(\"add\")}>+</Typography>\n                    </MyButton>\n                </Box>\n                <Box display=\"flex\" justifyContent=\"center\">\n                    <MyButton onClick={() => handleNumberClick(0)}>\n                        <Typography variant=\"h5\">0</Typography>\n                    </MyButton>\n                    <MyButton onClick={handleDoubleZeroClick}>\n                        <Typography variant=\"h5\">00</Typography>\n                    </MyButton>\n                    <MyButton>\n                        <Typography variant=\"h5\" onClick={handleDicimalPointClick}>.</Typography>\n                    </MyButton>\n                    <MyButton backgroundColor=\"orange\">\n                        <Typography variant=\"h5\" onClick={handleAnswerClick}>=</Typography>\n                    </MyButton>\n                </Box>\n            </Box>\n        </div>\n    )\n};\n\nexport default Calculator;","import React from 'react';\nimport './App.css';\n\nimport Calculator from './containers/Calculator'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <Calculator />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}